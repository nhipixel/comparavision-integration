-- Supabase SQL Schema for Vellum-like project
-- Run this in your Supabase SQL Editor after running the initial `supabase-schema.sql`

-- Create organizations table
CREATE TABLE IF NOT EXISTS organizations (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create a junction table for users and organizations (many-to-many)
CREATE TABLE IF NOT EXISTS user_organizations (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  org_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  role TEXT DEFAULT 'member' NOT NULL, -- e.g., 'admin', 'member'
  PRIMARY KEY (user_id, org_id)
);

-- Create public_models table
CREATE TABLE IF NOT EXISTS public_models (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT,
    huggingface_id VARCHAR,
    size_mb BIGINT,
    parameter_count BIGINT,
    vellum_deployment_id VARCHAR,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create proprietary_models table
CREATE TABLE IF NOT EXISTS proprietary_models (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    org_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
    name TEXT,
    version VARCHAR,
    file_path VARCHAR,
    size_mb BIGINT,
    vellum_deployment_id VARCHAR,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create comparison_results table
CREATE TABLE IF NOT EXISTS comparison_results (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    org_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
    test_name TEXT,
    comparison_type TEXT,
    model_a_id UUID,
    model_a_type VARCHAR(50),
    model_b_id UUID,
    model_b_type VARCHAR(50),
    avg_inference_ms_a DOUBLE PRECISION,
    avg_inference_ms_b DOUBLE PRECISION,
    model_size_mb_a BIGINT,
    model_size_mb_b BIGINT,
    peak_memory_mb_a BIGINT,
    peak_memory_mb_b BIGINT,
    fps_a DOUBLE PRECISION,
    fps_b DOUBLE PRECISION,
    winner TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);


-- RLS Policies for new tables

-- Organizations
ALTER TABLE organizations ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view organizations they belong to" ON organizations
  FOR SELECT USING (id IN (
    SELECT org_id FROM user_organizations WHERE user_id IN (
      SELECT id FROM users WHERE auth0_id = auth.jwt() ->> 'sub'
    )
  ));

-- User Organizations
ALTER TABLE user_organizations ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own organization memberships" ON user_organizations
  FOR SELECT USING (user_id IN (
    SELECT id FROM users WHERE auth0_id = auth.jwt() ->> 'sub'
  ));

-- Proprietary Models
ALTER TABLE proprietary_models ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view proprietary models of their organizations" ON proprietary_models
  FOR SELECT USING (org_id IN (
    SELECT org_id FROM user_organizations WHERE user_id IN (
      SELECT id FROM users WHERE auth0_id = auth.jwt() ->> 'sub'
    )
  ));

-- Public models are visible to all authenticated users
ALTER TABLE public_models ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Authenticated users can view public models" ON public_models
  FOR SELECT USING (auth.role() = 'authenticated');

-- Comparison Results
ALTER TABLE comparison_results ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view comparison results of their organizations" ON comparison_results
  FOR SELECT USING (org_id IN (
    SELECT org_id FROM user_organizations WHERE user_id IN (
      SELECT id FROM users WHERE auth0_id = auth.jwt() ->> 'sub'
    )
  ));

-- Add policies for external access
CREATE POLICY "Allow organization members to insert data" ON organizations
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow organization members to update their data" ON organizations
    FOR UPDATE USING (id IN (
        SELECT org_id FROM user_organizations WHERE user_id = auth.uid()
    ));

-- Add explicit read permissions
CREATE POLICY "Allow authenticated users to read public models" ON public_models
    FOR SELECT USING (auth.role() = 'authenticated');


-- Seed data with specific UUIDs for testing
-- Create test organization
INSERT INTO organizations (id, name)
VALUES ('d0dc6b6c-7ea1-4df0-8595-7c773b86bd72', 'Test Organization')
ON CONFLICT (id) DO NOTHING;

-- Create test user-organization link (assuming user exists from Auth0)
INSERT INTO user_organizations (user_id, org_id, role)
SELECT 
    (SELECT id FROM users WHERE auth0_id = auth.jwt() ->> 'sub' LIMIT 1),
    'd0dc6b6c-7ea1-4df0-8595-7c773b86bd72',
    'admin'
ON CONFLICT DO NOTHING;

-- Seed some proprietary models
INSERT INTO proprietary_models (org_id, name, version, size_mb)
VALUES 
    ('d0dc6b6c-7ea1-4df0-8595-7c773b86bd72', 'Test Model 1', '1.0', 1024),
    ('d0dc6b6c-7ea1-4df0-8595-7c773b86bd72', 'Test Model 2', '2.0', 2048)
ON CONFLICT DO NOTHING;

-- Seed some public models
INSERT INTO public_models (name, huggingface_id, size_mb, parameter_count)
VALUES 
    ('GPT-2 Small', 'gpt2', 548, 124000000),
    ('BERT Base', 'bert-base-uncased', 440, 110000000)
ON CONFLICT DO NOTHING;
